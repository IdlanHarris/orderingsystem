draft ordering system

Great! Based on your requirements, you're building a **restaurant food ordering system** with:  
- **Guest checkout** (no customer accounts, just name + table number).  
- **Counter/kitchen workflow** (staff handles payment, orders go to the kitchen).  
- **Tech stack**: Next.js (fullstack), PostgreSQL (via Supabase).  

Here’s a step-by-step development plan tailored to your needs:

---

### **Phase 1: Core System (MVP)**
#### **1. Database Schema (Supabase PostgreSQL)**
Tables you’ll need:  
- **`products`**  
  ```sql
  id (UUID/PK), name (text), price (numeric), description (text), category (text), image_url (text), is_available (boolean)
  ```
- **`orders`**  
  ```sql
  id (UUID/PK), customer_name (text), table_number (text), status (text: "pending", "cooking", "ready"), created_at (timestamp)
  ```
- **`order_items`**  
  ```sql
  id (UUID/PK), order_id (FK → orders), product_id (FK → products), quantity (integer), special_requests (text)
  ```
- **`admin_users`** (for staff logins)  
  ```sql
  id (UUID/PK), email (text), password_hash (text)
  ```

#### **2. Backend (Next.js API Routes)**
- **`/api/products`** (GET): Fetch all available products.  
- **`/api/orders`** (POST): Submit a new order (name + table number + cart items).  
- **`/api/orders`** (GET): Fetch orders for the kitchen/staff view.  
- **`/api/orders/[id]`** (PATCH): Update order status (e.g., "pending" → "ready").  

#### **3. Frontend (Next.js)**
- **Product Menu Page**  
  - List products (grouped by category).  
  - "Add to cart" button for each item.  
- **Cart Page**  
  - Shows selected items, quantities, total price.  
  - Form for `customer_name` and `table_number`.  
  - "Submit Order" button (POSTs to `/api/orders`).  
- **Order Confirmation Page**  
  - Displays "Order received!" with a unique ID (optional).  

#### **4. Kitchen/Staff View (Basic)**  
- A simple page (`/kitchen`) showing:  
  - Orders filtered by `status="pending"` (GET `/api/orders?status=pending`).  
  - Button to update status to `"ready"` (PATCH `/api/orders/[id]`).  

---

### **Phase 2: Admin Panel (After MVP)**
- **Login page** for staff (`/admin`).  
- **CRUD for products** (add/edit/disable items).  
- **Order management** (view all orders, filter by date/status).  
- **Inventory tracking** (link products to stock levels).  

---

### **Phase 3: Optional Enhancements**
- Real-time updates (Supabase Realtime API to refresh kitchen view).  
- QR code scanning for table numbers.  
- Print order receipts (automatically sent to kitchen printer).  

---

### **Recommended Workflow**
1. **Day 1-2**: Set up Supabase + DB tables.  
2. **Day 3-4**: Build product menu + cart frontend.  
3. **Day 5**: Implement order submission API + kitchen view.  
4. **Day 6**: Test full flow (order → kitchen → status update).  
5. **Day 7+**: Add admin panel and polish.  

---

### **Supabase Tips**
- Use **Row-Level Security (RLS)** to protect data (e.g., kitchen view only accessible by staff).  
- Enable the **Realtime API** later for live order tracking.  
- For auth, use **Supabase Auth** for admin logins.  

Would you like a code snippet for any part (e.g., Next.js API route for order submission)?